[
  {
    "path": "posts/2021-05-28-introduction-to-functional-programming/",
    "title": "1. Introduction to Functional Programming",
    "description": "A brief introduction to Functional Programming.",
    "author": [
      {
        "name": "Shijing Zhou",
        "url": {}
      }
    ],
    "date": "2021-05-28",
    "categories": [],
    "contents": "\n\n\n\n",
    "preview": {},
    "last_modified": "2021-06-06T15:28:34-07:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-05-28-introduction-to-loops/",
    "title": "2. Introduction to Loops",
    "description": "Using loops in R.",
    "author": [
      {
        "name": "Shijing Zhou",
        "url": {}
      }
    ],
    "date": "2021-05-28",
    "categories": [],
    "contents": "\n\n\n\n",
    "preview": {},
    "last_modified": "2021-06-06T15:28:34-07:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-05-28-write-a-function/",
    "title": "3. Write a Function!",
    "description": "Demonstration of how to write a function with personality research data.",
    "author": [
      {
        "name": "Raleigh Goodwin, Vinita Vader",
        "url": {}
      }
    ],
    "date": "2021-05-28",
    "categories": [],
    "contents": "\nIntroduction:\nThis is a tutorial on using functional programming to solve specific problems in research. This tutorial addresses the issue of Ipsatization which consists of methods of data transformation used in Personality Psychology and Social Psychology research. Ipsatization transforms each participant’s ratings relative to their average response such that the total and the average of the participant’s scores across all items in the dataset are zero (or another constant for all people) (Greer and Dunlap, 1997) [https://psycnet.apa.org/record/1997-06270-006].\nPackages such as (multicon)[https://cran.r-project.org/web/packages/multicon/multicon.pdf] have built functions like ipsatize [https://rdrr.io/cran/multicon/man/ipsatize.html] which enable standardizing rows of the dataframes being studied. However it does not address the various types of ipsative scorings available for carrying out different transformations.\nAn important aspect of using data transformations involves understanding the relationship between raw data and transformed data. The purpose of the function built here will be to address this specific issue.\nData used for this study\nWe will use the following libraries for this tutorial. Loading the entire library may not be always necessary especially if you intend to use it only once. The following list consists of all libraries used in this tutorial. Those which only need loading once will be used where the function is being called.\n\n\n\nFor this tutorial we will be using the Ten Item Personality Inventory (TIPI; Gosling, S. D., Rentfrow, P. J., & Swann, W. B., Jr., 2003)[https://psycnet.apa.org/record/2003-09807-003]. This is a brief measure of the Big Five Personality Domains (Goldberg, 1993)[https://psycnet.apa.org/record/1993-17546-001].\nThe TIPI items were rated “I see myself as:” _____ such that\n1 = Disagree strongly 2 = Disagree moderately 3 = Disagree a little 4 = Neither agree nor disagree 5 = Agree a little 6 = Agree moderately 7 = Agree strongly\nWe call the data using the import function from the rio package, setting the class of the data to “tibble”. This step helps to retain the data in a format which is more amenable with the data manipulation in tidyverse . We then look at the structure of the data which indicates that most of the column classes in this dataset are integers. We will retain the columns form TIPI1 to TIPI10 using the select function from dplyr. This package is loaded along with other packages in tidyverse . The kable function from the knitr package helps to format the data into a table and I am specifying 5 rows to be displayed in this table.\n\ntibble [2,495 × 72] (S3: tbl_df/tbl/data.frame)\n $ Q1          : int [1:2495] 5 5 2 5 5 1 4 5 1 1 ...\n $ Q2          : int [1:2495] 5 5 4 4 4 1 3 4 1 2 ...\n $ Q3          : int [1:2495] 3 5 1 1 1 1 3 3 1 1 ...\n $ Q4          : int [1:2495] 5 5 2 2 4 1 3 3 1 1 ...\n $ Q5          : int [1:2495] 5 5 2 4 4 1 4 4 1 1 ...\n $ Q6          : int [1:2495] 5 3 2 5 5 1 3 5 1 5 ...\n $ Q7          : int [1:2495] 5 5 4 4 4 1 3 5 1 1 ...\n $ Q8          : int [1:2495] 3 5 2 1 3 1 4 5 1 1 ...\n $ Q9          : int [1:2495] 4 1 2 4 1 1 2 5 1 1 ...\n $ Q10         : int [1:2495] 5 4 4 5 5 1 3 5 1 4 ...\n $ Q11         : int [1:2495] 5 4 2 5 5 1 3 5 1 1 ...\n $ Q12         : int [1:2495] 5 5 4 5 5 1 2 5 1 1 ...\n $ Q13         : int [1:2495] 3 4 0 1 3 1 2 3 1 1 ...\n $ Q14         : int [1:2495] 5 4 2 4 5 1 3 4 1 1 ...\n $ Q15         : int [1:2495] 5 5 4 5 5 1 4 5 1 5 ...\n $ E1          : int [1:2495] 7070 4086 27535 4561 8841 15267 7249 8024 4654 23787 ...\n $ E2          : int [1:2495] 7469 13107 7814 5589 7575 7112 4651 7343 6076 12375 ...\n $ E3          : int [1:2495] 7383 2807 7762 3506 3832 4798 5496 6808 3032 2006 ...\n $ E4          : int [1:2495] 6540 5030 10290 3784 7775 5214 3936 6794 3984 3650 ...\n $ E5          : int [1:2495] 9098 7405 8558 5093 4160 3683 7831 8743 4328 3188 ...\n $ E6          : int [1:2495] 4998 7864 10538 3555 5216 4130 6816 6196 4070 48851 ...\n $ E7          : int [1:2495] 6971 16234 4740 3158 7559 4487 6167 7762 4012 9013 ...\n $ E8          : int [1:2495] 4713 2603 4162 1887 5792 2376 2032 4797 2430 2128 ...\n $ E9          : int [1:2495] 6032 14174 6492 7678 10296 3273 4000 8015 4191 2898 ...\n $ E10         : int [1:2495] 5878 9423 11512 2304 5455 5501 3583 5764 8444 10420 ...\n $ E11         : int [1:2495] 4031 11683 6874 3604 3864 3790 4481 5717 4224 5820 ...\n $ E12         : int [1:2495] 4386 12718 11440 2724 11799 7777 5071 5352 4404 2049 ...\n $ E13         : int [1:2495] 9077 4816 0 2689 7872 4553 2368 6387 1065 9901 ...\n $ E14         : int [1:2495] 5113 6806 11418 2657 10543 5944 4408 9671 5533 3838 ...\n $ E15         : int [1:2495] 4204 4823 9872 3824 4224 4028 6103 5622 4964 7208 ...\n $ introelapse : int [1:2495] 11 6 7 5 4 35 12 27 2 26 ...\n $ testelapse  : int [1:2495] 95 125 141 58 105 87 75 104 67 148 ...\n $ surveyelapse: int [1:2495] 142 144 90 135 210 154 67 186 121 118 ...\n $ TIPI1       : int [1:2495] 5 6 6 6 1 4 2 4 4 1 ...\n $ TIPI2       : int [1:2495] 3 7 6 7 3 2 5 5 5 6 ...\n $ TIPI3       : int [1:2495] 6 6 6 7 7 6 4 6 6 3 ...\n $ TIPI4       : int [1:2495] 2 7 1 5 2 2 2 2 2 1 ...\n $ TIPI5       : int [1:2495] 6 6 7 7 6 6 5 7 4 5 ...\n $ TIPI6       : int [1:2495] 6 3 5 6 4 5 6 4 5 7 ...\n $ TIPI7       : int [1:2495] 7 7 6 5 5 6 2 5 6 6 ...\n $ TIPI8       : int [1:2495] 2 5 5 1 5 3 3 5 2 5 ...\n $ TIPI9       : int [1:2495] 7 1 7 5 5 6 5 3 7 7 ...\n $ TIPI10      : int [1:2495] 1 1 7 1 3 2 5 1 2 4 ...\n $ VCL1        : int [1:2495] 1 1 1 1 1 1 1 1 1 1 ...\n $ VCL2        : int [1:2495] 1 1 1 1 1 1 1 1 1 1 ...\n $ VCL3        : int [1:2495] 1 0 1 1 0 1 0 0 0 1 ...\n $ VCL4        : int [1:2495] 1 1 1 1 1 1 1 1 1 1 ...\n $ VCL5        : int [1:2495] 1 1 1 1 1 1 1 1 1 1 ...\n $ VCL6        : int [1:2495] 0 0 1 0 0 0 0 0 0 0 ...\n $ VCL7        : int [1:2495] 0 0 1 0 0 0 0 0 0 0 ...\n $ VCL8        : int [1:2495] 0 0 1 1 0 0 0 0 0 0 ...\n $ VCL9        : int [1:2495] 0 0 0 0 0 1 0 0 0 0 ...\n $ VCL10       : int [1:2495] 1 1 1 1 1 1 1 1 1 1 ...\n $ VCL11       : int [1:2495] 1 1 1 1 0 1 0 0 0 0 ...\n $ VCL12       : int [1:2495] 0 0 0 0 0 1 0 0 0 0 ...\n $ VCL13       : int [1:2495] 1 0 1 1 1 1 1 0 1 1 ...\n $ VCL14       : int [1:2495] 1 1 1 1 1 1 1 1 1 1 ...\n $ VCL15       : int [1:2495] 1 1 1 0 1 1 1 1 1 1 ...\n $ VCL16       : int [1:2495] 1 1 1 1 1 1 1 1 1 1 ...\n $ education   : int [1:2495] 3 1 4 3 2 3 2 2 1 3 ...\n $ urban       : int [1:2495] 0 2 2 1 2 1 2 1 3 3 ...\n $ gender      : int [1:2495] 1 2 2 1 1 1 1 1 1 1 ...\n $ engnat      : int [1:2495] 2 1 2 1 1 1 1 1 1 2 ...\n $ age         : int [1:2495] 28 14 26 25 37 34 17 23 17 28 ...\n $ hand        : int [1:2495] 1 1 1 1 1 1 1 1 1 1 ...\n $ religion    : int [1:2495] 2 1 1 12 2 7 1 2 4 2 ...\n $ orientation : int [1:2495] 1 2 1 1 2 1 1 1 2 1 ...\n $ race        : int [1:2495] 5 4 4 4 4 4 4 4 4 4 ...\n $ voted       : int [1:2495] 2 2 1 1 2 1 2 2 2 1 ...\n $ married     : int [1:2495] 1 1 1 1 2 2 1 1 1 2 ...\n $ familysize  : int [1:2495] 1 1 2 3 2 2 2 3 2 3 ...\n $ major       : chr [1:2495] \"ACTING\" \"\" \"philosophy\" \"history\" ...\n[1] \"| TIPI1| TIPI2| TIPI3| TIPI4| TIPI5| TIPI6| TIPI7| TIPI8| TIPI9| TIPI10|\"\n[2] \"|-----:|-----:|-----:|-----:|-----:|-----:|-----:|-----:|-----:|------:|\"\n[3] \"|     5|     3|     6|     2|     6|     6|     7|     2|     7|      1|\"\n[4] \"|     6|     7|     6|     7|     6|     3|     7|     5|     1|      1|\"\n[5] \"|     6|     6|     6|     1|     7|     5|     6|     5|     7|      7|\"\n\nNow that we have our data imported let’s start building functions.\nBuilding Functions\nThere are several ways in which one could go about building functions. The approach outlined here should be viewed as one of the several approaches to go about building functions.\nAs you think about building a function, keep in mind the purpose of why you set to build a function in the first place. Your function will ideally solve a problem specific to your analysis or can also be used by others to carry out their analyses.\nLet’s state the problem first - The difference between raw and ipsatized data has been studied to some extent leading to several debates amongst researchers questioning the utility of these methods. It is therefore important to look at correlations between the raw and ipsatized data.\nNow, that we understand the problem let’s think about how our function could address this problem. Here are a sequence of questions which will help you think about the function you intend to build.\nStep 1 - What should my output look like?\nHere we are looking for an output which is a list consisting of raw and transformed or ipsatized data.\n\n\n\nStep 2 - What is the broad outline for obtaining this output?\nWe can build a function for ipsatizing the data and one for then putting the ipsatized data with the raw data within a larger list. Great we have a broad plan! Let’s break this down further.\nStep 3 - How do we build the functions specified in step 2?\nWe will focus on one function at a time. We are going to first build the ipsatize function. Let’s break down the ipsatize function\ni. What is the \\(name\\) of the function?\nWe will call it ipsatize.MeanDev as the type of ipsatization this function will perform is Mean deviation.\nii. What will the the function $do$ ?\nIt will compute the means of the rows and subtract the mean from every score in the respective rows. In order to do this we will need an id column to calculate means for every row. This is slightly tricky but will be clear as we go along.\nA good way of thinking about writing functions is to start with the data. We will try and add an id column to the data.\nWe can use the row_number within mutate to create a new column.\n\n[1] \"| TIPI1| TIPI2| TIPI3| TIPI4| TIPI5| TIPI6| TIPI7| TIPI8| TIPI9| TIPI10|   id|\"\n[2] \"|-----:|-----:|-----:|-----:|-----:|-----:|-----:|-----:|-----:|------:|----:|\"\n[3] \"|     5|     3|     6|     2|     6|     6|     7|     2|     7|      1|    1|\"\n[4] \"|     6|     7|     6|     7|     6|     3|     7|     5|     1|      1|    2|\"\n[5] \"|     6|     6|     6|     1|     7|     5|     6|     5|     7|      7|    3|\"\n\nThat works! Now let’s wrap this within a function. We will call it add_id\n\n\n\nNow let’s check if it works.\n\n[1] \"| TIPI1| TIPI2| TIPI3| TIPI4| TIPI5| TIPI6| TIPI7| TIPI8| TIPI9| TIPI10|   id|\"\n[2] \"|-----:|-----:|-----:|-----:|-----:|-----:|-----:|-----:|-----:|------:|----:|\"\n[3] \"|     5|     3|     6|     2|     6|     6|     7|     2|     7|      1|    1|\"\n[4] \"|     6|     7|     6|     7|     6|     3|     7|     5|     1|      1|    2|\"\n[5] \"|     6|     6|     6|     1|     7|     5|     6|     5|     7|      7|    3|\"\n\nPerfect! Now the next part is figuring out how to add a column with the mean rows. One way of thinking about this is we have a id variable which can be used to group the data. We can then use pivot_longer and pivot_wider to format the data.\n\n# A tibble: 24,950 x 3\n      id col_names value\n   <int> <chr>     <int>\n 1     1 TIPI1         5\n 2     1 TIPI2         3\n 3     1 TIPI3         6\n 4     1 TIPI4         2\n 5     1 TIPI5         6\n 6     1 TIPI6         6\n 7     1 TIPI7         7\n 8     1 TIPI8         2\n 9     1 TIPI9         7\n10     1 TIPI10        1\n# … with 24,940 more rows\n\nWe have a 10 rows (equal to 10 variables) dedicated to every row id in this dataframe. We can use group_by to compute the means within every group and find deviations for every score from the mean.\n\n# A tibble: 24,950 x 4\n# Groups:   id [2,495]\n      id col_names value means_rowwise\n   <int> <chr>     <dbl>         <dbl>\n 1     1 TIPI1       0.5           4.5\n 2     1 TIPI2      -1.5           4.5\n 3     1 TIPI3       1.5           4.5\n 4     1 TIPI4      -2.5           4.5\n 5     1 TIPI5       1.5           4.5\n 6     1 TIPI6       1.5           4.5\n 7     1 TIPI7       2.5           4.5\n 8     1 TIPI8      -2.5           4.5\n 9     1 TIPI9       2.5           4.5\n10     1 TIPI10     -3.5           4.5\n# … with 24,940 more rows\n\nNow, we can use pivot_wider for reformatting the data to how it looked before.\n\n# A tibble: 2,495 x 11\n      id  TIPI1  TIPI2 TIPI3 TIPI4  TIPI5  TIPI6  TIPI7  TIPI8 TIPI9\n   <int>  <dbl>  <dbl> <dbl> <dbl>  <dbl>  <dbl>  <dbl>  <dbl> <dbl>\n 1     1  0.5   -1.5    1.5  -2.5   1.5    1.5    2.5   -2.5     2.5\n 2     2  1.10   2.10   1.10  2.10  1.10  -1.9    2.10   0.100  -3.9\n 3     3  0.4    0.4    0.4  -4.6   1.4   -0.600  0.4   -0.600   1.4\n 4     4  1      2      2     0     2      1      0     -4       0  \n 5     5 -3.10  -1.10   2.9  -2.10  1.9   -0.100  0.9    0.9     0.9\n 6     6 -0.2   -2.2    1.8  -2.2   1.8    0.800  1.8   -1.2     1.8\n 7     7 -1.9    1.1    0.1  -1.9   1.1    2.1   -1.9   -0.900   1.1\n 8     8 -0.2    0.800  1.8  -2.2   2.8   -0.2    0.800  0.800  -1.2\n 9     9 -0.300  0.7    1.7  -2.3  -0.300  0.7    1.7   -2.3     2.7\n10    10 -3.5    1.5   -1.5  -3.5   0.5    2.5    1.5    0.5     2.5\n# … with 2,485 more rows, and 1 more variable: TIPI10 <dbl>\n\nNow we can wrap this into a function\n\n# A tibble: 2,495 x 11\n      id  TIPI1  TIPI2 TIPI3 TIPI4  TIPI5  TIPI6  TIPI7  TIPI8 TIPI9\n   <int>  <dbl>  <dbl> <dbl> <dbl>  <dbl>  <dbl>  <dbl>  <dbl> <dbl>\n 1     1  0.5   -1.5    1.5  -2.5   1.5    1.5    2.5   -2.5     2.5\n 2     2  1.10   2.10   1.10  2.10  1.10  -1.9    2.10   0.100  -3.9\n 3     3  0.4    0.4    0.4  -4.6   1.4   -0.600  0.4   -0.600   1.4\n 4     4  1      2      2     0     2      1      0     -4       0  \n 5     5 -3.10  -1.10   2.9  -2.10  1.9   -0.100  0.9    0.9     0.9\n 6     6 -0.2   -2.2    1.8  -2.2   1.8    0.800  1.8   -1.2     1.8\n 7     7 -1.9    1.1    0.1  -1.9   1.1    2.1   -1.9   -0.900   1.1\n 8     8 -0.2    0.800  1.8  -2.2   2.8   -0.2    0.800  0.800  -1.2\n 9     9 -0.300  0.7    1.7  -2.3  -0.300  0.7    1.7   -2.3     2.7\n10    10 -3.5    1.5   -1.5  -3.5   0.5    2.5    1.5    0.5     2.5\n# … with 2,485 more rows, and 1 more variable: TIPI10 <dbl>\n\nThis works! We can add constraints to which type of variables can be added in the dataframe. For this we can build a function which only selects numeric columns.\n\n\n\nIn the above function, we specify that if the sum of all possible numeric columns in a dataframe is 0, we stop the loop and throw an error message else return the dataframe. This will ensure that all the columns in the dataframe we are working with are numeric. We are using map_lgl from the purrr package which maps the is.numeric function to every column in th edataframe.\nLet’s give this function a try. We know that the dataframe “data” has all columns of class numeric whereas “file.data” does not.\n\n[1] FALSE\n[1] TRUE\n\nThis works!\nNow we can add this to the main function.\n\n\nipsatize.MD <- function(df){\n  \n df_clean <- df %>% \n   just_num() %>% \n   add_id()\n  \n output <- df_clean %>% \n  pivot_longer(cols = !id, names_to = \"col_names\") %>% \n  group_by(id) %>% \n  mutate(means_rowwise = mean(value, na.rm = T),\n         value = value - means_rowwise) %>% \n  pivot_wider(names_from = col_names, values_from = value) %>% \n  select(id, !means_rowwise) %>% \n   ungroup() %>% \n   select(-id)\n\n  output\n}\n\nipsatize.MD(data)\n\n\n# A tibble: 2,495 x 10\n    TIPI1  TIPI2 TIPI3 TIPI4  TIPI5  TIPI6  TIPI7  TIPI8 TIPI9 TIPI10\n    <dbl>  <dbl> <dbl> <dbl>  <dbl>  <dbl>  <dbl>  <dbl> <dbl>  <dbl>\n 1  0.5   -1.5    1.5  -2.5   1.5    1.5    2.5   -2.5     2.5  -3.5 \n 2  1.10   2.10   1.10  2.10  1.10  -1.9    2.10   0.100  -3.9  -3.9 \n 3  0.4    0.4    0.4  -4.6   1.4   -0.600  0.4   -0.600   1.4   1.4 \n 4  1      2      2     0     2      1      0     -4       0    -4   \n 5 -3.10  -1.10   2.9  -2.10  1.9   -0.100  0.9    0.9     0.9  -1.10\n 6 -0.2   -2.2    1.8  -2.2   1.8    0.800  1.8   -1.2     1.8  -2.2 \n 7 -1.9    1.1    0.1  -1.9   1.1    2.1   -1.9   -0.900   1.1   1.1 \n 8 -0.2    0.800  1.8  -2.2   2.8   -0.2    0.800  0.800  -1.2  -3.2 \n 9 -0.300  0.7    1.7  -2.3  -0.300  0.7    1.7   -2.3     2.7  -2.3 \n10 -3.5    1.5   -1.5  -3.5   0.5    2.5    1.5    0.5     2.5  -0.5 \n# … with 2,485 more rows\n\nA closer look will tell you that we could benefit from renaming the column names of the ips dataframe within the list. The paste function can be helpful to do this.\n\n\nrename_ips = function(ipsatized_data){\n  names(ipsatized_data) <- paste0(names(ipsatized_data), \"_ips\")\n  return(ipsatized_data)\n}\n\nrename_ips(ipsatize.MD(data))\n\n\n# A tibble: 2,495 x 10\n   TIPI1_ips TIPI2_ips TIPI3_ips TIPI4_ips TIPI5_ips TIPI6_ips\n       <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl>\n 1     0.5      -1.5        1.5      -2.5      1.5       1.5  \n 2     1.10      2.10       1.10      2.10     1.10     -1.9  \n 3     0.4       0.4        0.4      -4.6      1.4      -0.600\n 4     1         2          2         0        2         1    \n 5    -3.10     -1.10       2.9      -2.10     1.9      -0.100\n 6    -0.2      -2.2        1.8      -2.2      1.8       0.800\n 7    -1.9       1.1        0.1      -1.9      1.1       2.1  \n 8    -0.2       0.800      1.8      -2.2      2.8      -0.2  \n 9    -0.300     0.7        1.7      -2.3     -0.300     0.7  \n10    -3.5       1.5       -1.5      -3.5      0.5       2.5  \n# … with 2,485 more rows, and 4 more variables: TIPI7_ips <dbl>,\n#   TIPI8_ips <dbl>, TIPI9_ips <dbl>, TIPI10_ips <dbl>\n\nAll we need to do now is wrap up the ipsatized data and raw data within a list.\n\n\nipsatize.MeanDev = function(set){\n  \n  l <- list(\"ips\" = rename_ips(ipsatize.MD(data)) ,                \"raw\" = data,\n            \"correlation.matrix\" = cor(rename_ips(ipsatize.MD(data)), data))\n  l\n}\n\n(ips.raw.data = ipsatize.MeanDev(data))\n\n\n$ips\n# A tibble: 2,495 x 10\n   TIPI1_ips TIPI2_ips TIPI3_ips TIPI4_ips TIPI5_ips TIPI6_ips\n       <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl>\n 1     0.5      -1.5        1.5      -2.5      1.5       1.5  \n 2     1.10      2.10       1.10      2.10     1.10     -1.9  \n 3     0.4       0.4        0.4      -4.6      1.4      -0.600\n 4     1         2          2         0        2         1    \n 5    -3.10     -1.10       2.9      -2.10     1.9      -0.100\n 6    -0.2      -2.2        1.8      -2.2      1.8       0.800\n 7    -1.9       1.1        0.1      -1.9      1.1       2.1  \n 8    -0.2       0.800      1.8      -2.2      2.8      -0.2  \n 9    -0.300     0.7        1.7      -2.3     -0.300     0.7  \n10    -3.5       1.5       -1.5      -3.5      0.5       2.5  \n# … with 2,485 more rows, and 4 more variables: TIPI7_ips <dbl>,\n#   TIPI8_ips <dbl>, TIPI9_ips <dbl>, TIPI10_ips <dbl>\n\n$raw\n# A tibble: 2,495 x 10\n   TIPI1 TIPI2 TIPI3 TIPI4 TIPI5 TIPI6 TIPI7 TIPI8 TIPI9 TIPI10\n   <int> <int> <int> <int> <int> <int> <int> <int> <int>  <int>\n 1     5     3     6     2     6     6     7     2     7      1\n 2     6     7     6     7     6     3     7     5     1      1\n 3     6     6     6     1     7     5     6     5     7      7\n 4     6     7     7     5     7     6     5     1     5      1\n 5     1     3     7     2     6     4     5     5     5      3\n 6     4     2     6     2     6     5     6     3     6      2\n 7     2     5     4     2     5     6     2     3     5      5\n 8     4     5     6     2     7     4     5     5     3      1\n 9     4     5     6     2     4     5     6     2     7      2\n10     1     6     3     1     5     7     6     5     7      4\n# … with 2,485 more rows\n\n$correlation.matrix\n                 TIPI1       TIPI2        TIPI3        TIPI4\nTIPI1_ips   0.95997515 -0.11340834  0.031167709 -0.244068520\nTIPI2_ips  -0.12071784  0.95428074 -0.167224238  0.148187176\nTIPI3_ips   0.02535938 -0.16688353  0.948872899 -0.298764735\nTIPI4_ips  -0.25970548  0.12817941 -0.307516250  0.962139678\nTIPI5_ips   0.15867518 -0.13509164 -0.005073157 -0.256663167\nTIPI6_ips  -0.68318241 -0.07328539 -0.024670231  0.073760081\nTIPI7_ips   0.19604318 -0.39102208  0.007475973 -0.008942264\nTIPI8_ips  -0.09883568  0.05362126 -0.550478491  0.158821663\nTIPI9_ips   0.06676858 -0.27632275  0.268938383 -0.690397982\nTIPI10_ips -0.22041641 -0.06129857 -0.108530999 -0.002177791\n                  TIPI5        TIPI6       TIPI7       TIPI8\nTIPI1_ips   0.173616771 -0.666541441  0.17044573 -0.08266381\nTIPI2_ips  -0.120651089 -0.038939637 -0.40327991  0.06565301\nTIPI3_ips   0.008668343  0.015568018 -0.02008034 -0.54989652\nTIPI4_ips  -0.255068624  0.091005873 -0.05008496  0.15131155\nTIPI5_ips   0.919218995 -0.203227013  0.02418945 -0.02356731\nTIPI6_ips  -0.227006085  0.953180313 -0.21528145 -0.08954131\nTIPI7_ips   0.073692208 -0.162399055  0.94923204 -0.08558253\nTIPI8_ips  -0.027066263 -0.067303304 -0.11907202  0.95695523\nTIPI9_ips   0.065543427 -0.009290563 -0.02889303 -0.33029253\nTIPI10_ips -0.376767840  0.040201343 -0.22884271 -0.10619799\n                 TIPI9       TIPI10\nTIPI1_ips   0.09172718 -0.187414036\nTIPI2_ips  -0.26483551 -0.031356832\nTIPI3_ips   0.29771049 -0.076414836\nTIPI4_ips  -0.68790076  0.007123348\nTIPI5_ips   0.08228079 -0.365950413\nTIPI6_ips  -0.02645471  0.029629981\nTIPI7_ips   0.01615832 -0.176200329\nTIPI8_ips  -0.32648284 -0.089488624\nTIPI9_ips   0.95761526 -0.057303325\nTIPI10_ips -0.06741043  0.941250723\n\nSo now we have a list with the three dataframes. We can look at the correlations between raw and ipsatized data.\n\n\ntibble(\n  diag(ips.raw.data$correlation.matrix), colnames(ips.raw.data$ips), colnames(ips.raw.data$raw)\n)\n\n\n# A tibble: 10 x 3\n   `diag(ips.raw.data$corre… `colnames(ips.raw.d… `colnames(ips.raw.d…\n                       <dbl> <chr>                <chr>               \n 1                     0.960 TIPI1_ips            TIPI1               \n 2                     0.954 TIPI2_ips            TIPI2               \n 3                     0.949 TIPI3_ips            TIPI3               \n 4                     0.962 TIPI4_ips            TIPI4               \n 5                     0.919 TIPI5_ips            TIPI5               \n 6                     0.953 TIPI6_ips            TIPI6               \n 7                     0.949 TIPI7_ips            TIPI7               \n 8                     0.957 TIPI8_ips            TIPI8               \n 9                     0.958 TIPI9_ips            TIPI9               \n10                     0.941 TIPI10_ips           TIPI10              \n\nWe can also plot raw and ipsatized data. For example, lets look at the item 1.\n\n\n\n\n\n\n",
    "preview": "posts/2021-05-28-write-a-function/write-a-function_files/figure-html5/unnamed-chunk-17-1.png",
    "last_modified": "2021-06-06T16:10:21-07:00",
    "input_file": {}
  }
]
