[
  {
    "path": "posts/2021-05-28-introduction-to-functional-programming/",
    "title": "1. Introduction to Functional Programming",
    "description": "A brief introduction to Functional Programming.",
    "author": [
      {
        "name": "Shijing Zhou",
        "url": {}
      }
    ],
    "date": "2021-05-28",
    "categories": [],
    "contents": "\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-06-06T14:54:33-07:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-05-28-introduction-to-loops/",
    "title": "2. Introduction to Loops",
    "description": "Using loops in R.",
    "author": [
      {
        "name": "Shijing Zhou",
        "url": {}
      }
    ],
    "date": "2021-05-28",
    "categories": [],
    "contents": "\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-06-06T14:54:33-07:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-05-28-write-a-function/",
    "title": "3. Write a Function!",
    "description": "Demonstration of how to write a function with personality research data.",
    "author": [
      {
        "name": "Raleigh Goodwin, Vinita Vader",
        "url": {}
      }
    ],
    "date": "2021-05-28",
    "categories": [],
    "contents": "\r\nIntroduction\r\nIpsatization\r\nThis is a tutorial on using functional programming to solve specific problems in research. This tutorial addresses the issue of Ipsatization which consists of methods of data transformation used in Personality Psychology and Social Psychology research. Ipsatization transforms each participant’s ratings relative to their average response such that the total and the average of the participant’s scores across all items in the data set are zero (or another constant for all people) (Greer and Dunlap, 1997).\r\nPackages such as multicon have built functions like ipsatize() which enable standardizing rows of the dataframes being studied. However it does not address the various types of ipsative scorings available for carrying out different transformations.\r\nAn important aspect of using data transformations involves understanding the relationship between raw data and transformed data. The purpose of the function built here will be to address this specific issue.\r\nLoading Libraries\r\nBefore we get started, we need to load the libraries necessary to complete this tutorial. Loading the entire library may not be always necessary, especially if you intend to use it only once. This will be the case for rio, here, and knitr in this tutorial, so you may choose not to load them here if you’d like.\r\n\r\n\r\nlibrary(tidyverse)\r\nlibrary(purrr)\r\nlibrary(rio) # optional\r\nlibrary(here) #optional\r\nlibrary(knitr) #optional\r\n\r\n\r\n\r\nAbout the Data\r\nFor this tutorial, we will be working with a dataset containing the Ten Item Personality Inventory (TIPI; Gosling, S. D., Rentfrow, P. J., & Swann, W. B., Jr., 2003), a brief measure of the Big Five Personality Domains (Goldberg, 1993). Each item asks respondents to rate themselves on attributes (e.g., extroverted, critical, anxious, calm, etc.) using a Likert scale ranging from 1 to 7, wherein:\r\n1 = “Disagree strongly”\r\n2 = “Disagree moderately”\r\n3 = “Disagree a little”\r\n4 = “Neither agree nor disagree”\r\n5 = “Agree a little”\r\n6 = “Agree moderately”\r\n7 = “Agree strongly”\r\nThis particular dataset contains observations from N=2495 individuals who completed, among many other measures, the 10 TIPI items in 2016. Other variables included the Generic Conspiracist Beliefs Scale (Brotherton et al., 2013), various response time metrics, a vocabulary validity check, and demographics.\r\nImporting the Data\r\nWhen importing data, two important things to keep in mind are your working directory and reproducibility. Where you save your files can impact the ease at which you can call them; you’ll have the best luck saving data files of interest within the corresponding R Project. rio’s import() function provides an easy method for importing data files, including the ability to set the class of the data to tibble, which helps to retain the data in a format which is more amenable to data manipulation in tidyverse. To enhance reproducibility across different devices, we’ll use the here() function within the here package when specifying our file path.\r\n\r\n\r\n# Import data\r\ndf_tipi <- rio::import(here::here(\"content/dataCT.csv\"), setclass = \"tibble\")\r\n\r\n\r\n\r\nFor the current project, we’ll only be working with the TIPI items, so to simplify the dataframe we’re using, we can select only those columns.\r\n\r\n\r\n# Select desired variables\r\ndata <- df_tipi %>% \r\n  select(TIPI1:TIPI10)\r\n\r\n\r\n\r\nNow we can take a look at the data we’ll be working with. The kable() function from the knitr package helps to format the data into a neat table.\r\n\r\n\r\n# Take a look at the data\r\ndata %>% \r\n  head(n = 5) %>% # Take a look at the first 5 rows of the resulting dataframe\r\n  knitr::kable() # Format the output table neatly\r\n\r\n\r\nTIPI1\r\nTIPI2\r\nTIPI3\r\nTIPI4\r\nTIPI5\r\nTIPI6\r\nTIPI7\r\nTIPI8\r\nTIPI9\r\nTIPI10\r\n5\r\n3\r\n6\r\n2\r\n6\r\n6\r\n7\r\n2\r\n7\r\n1\r\n6\r\n7\r\n6\r\n7\r\n6\r\n3\r\n7\r\n5\r\n1\r\n1\r\n6\r\n6\r\n6\r\n1\r\n7\r\n5\r\n6\r\n5\r\n7\r\n7\r\n6\r\n7\r\n7\r\n5\r\n7\r\n6\r\n5\r\n1\r\n5\r\n1\r\n1\r\n3\r\n7\r\n2\r\n6\r\n4\r\n5\r\n5\r\n5\r\n3\r\n\r\nWith the libraries loaded and data imported, we can now begin building our function.\r\nTaking a look at the data\r\nFirst, though, we can brush off our function-building skills with a simple function to start. In the code above, we used head() to take a look at the data and kable() to format it. We’ll be doing this same process many, many times throughout the tutorial, so it would be a very useful function for us. This function, glance() will have two arguments: df and nrows, which are the dataframe and the desired number of preview rows, respectively.\r\n\r\n\r\nglance <- function(df, nrows) {\r\n  df %>% \r\n    head(n = nrows) %>% \r\n    knitr::kable()\r\n}\r\n\r\n\r\n\r\nBuilding Functions\r\nThere are several ways in which one could go about building functions. The approach outlined here should be viewed as one of the several approaches to go about building functions.\r\nAs you think about building a function, keep in mind the purpose of why you set to build a function in the first place. Your function will ideally solve a problem specific to your analysis or can also be used by others to carry out their analyses.\r\nLet’s state the problem first: The difference between raw and ipsatized data has been studied to some extent leading to several debates amongst researchers questioning the utility of these methods. It is therefore important to look at correlations between the raw and ipsatized data.\r\nNow that we understand the problem, let’s think about how our function could address this problem. Here are a sequence of questions which will help you think about the function you intend to build.\r\nWhat is the goal of this function?\r\nBasically, what do we need this function to do? For the current tutorial, we are writing a function that ipsatizes any dataset, meaning that it will compute the means of the rows and subtract the mean from every score in the respective rows. Ideally, it will produce output in the form of a list containing the raw and transformed (i.e., ipsatized) data.\r\nHow can we achieve this goal for a specific dataset?\r\nAs we learned in previous posts, when taking a functional programming approach to this problem, we should first attempt to solve it within a specific case. Once we’ve done so, we can then consider generalizing to a function. For this tutorial, we will be solving the problem first with the TIPI dataset, and then we can apply that solution to build the final function.\r\nHow can we break the function’s goal into smaller tasks?\r\nMost likely, we aren’t just going to be writing one function in this tutorial. Ideally, a function should complete exactly one task; therefore, when we are attempting to build a function to complete a complicated task like ipsatization, we will need to write multiple simple functions and combine them. Thus, it can be helpful to first outline and think through each step of the process and eventually create a function for each step.\r\nSolving for a specific case\r\nTo ipsatize the data, we need to calculate each participant’s mean response to the TIPI scale items and then subtract each response by that mean. This means we need to be able to conduct these operations by row rather than by column. One of the easier ways to do this is to use pivot_longer() to transform the data into a “longer” format.\r\nFirst, though, we need to create an ID for each participant that can then be used to identify their responses once the data is transformed.\r\n\r\n\r\ndata_id <- data %>% \r\n  mutate(id = c(1:nrow(data))) # Create ID column\r\n\r\ndata_id %>%\r\n  glance(5)\r\n\r\n\r\nTIPI1\r\nTIPI2\r\nTIPI3\r\nTIPI4\r\nTIPI5\r\nTIPI6\r\nTIPI7\r\nTIPI8\r\nTIPI9\r\nTIPI10\r\nid\r\n5\r\n3\r\n6\r\n2\r\n6\r\n6\r\n7\r\n2\r\n7\r\n1\r\n1\r\n6\r\n7\r\n6\r\n7\r\n6\r\n3\r\n7\r\n5\r\n1\r\n1\r\n2\r\n6\r\n6\r\n6\r\n1\r\n7\r\n5\r\n6\r\n5\r\n7\r\n7\r\n3\r\n6\r\n7\r\n7\r\n5\r\n7\r\n6\r\n5\r\n1\r\n5\r\n1\r\n4\r\n1\r\n3\r\n7\r\n2\r\n6\r\n4\r\n5\r\n5\r\n5\r\n3\r\n5\r\n\r\nNow that we have an ID variable that can be used to identify each participant’s responses, we can figure out how to create a column that calculates the mean of each rows using pivot_longer().\r\n\r\n\r\ndata_long <- data_id %>% \r\n  pivot_longer(cols = !id, names_to = \"item\", values_to = \"response\")\r\n\r\ndata_long %>% \r\n  glance(15)\r\n\r\n\r\nid\r\nitem\r\nresponse\r\n1\r\nTIPI1\r\n5\r\n1\r\nTIPI2\r\n3\r\n1\r\nTIPI3\r\n6\r\n1\r\nTIPI4\r\n2\r\n1\r\nTIPI5\r\n6\r\n1\r\nTIPI6\r\n6\r\n1\r\nTIPI7\r\n7\r\n1\r\nTIPI8\r\n2\r\n1\r\nTIPI9\r\n7\r\n1\r\nTIPI10\r\n1\r\n2\r\nTIPI1\r\n6\r\n2\r\nTIPI2\r\n7\r\n2\r\nTIPI3\r\n6\r\n2\r\nTIPI4\r\n7\r\n2\r\nTIPI5\r\n6\r\n\r\nInstead of participants’ responses being organized by row, all responses are now contained in one column and can be identified using the corresponding ID and Item values. We can use tidyverse’s group_by() function to group this dataframe by participant ID and then compute 1) the mean for each group and 2) the difference between each response and the mean of its group.\r\n\r\n\r\ndata_dev <- data_long %>% \r\n  group_by(id) %>% # Group by participant ID\r\n  mutate(mean_row = mean(response, na.rm = TRUE), # Calculate participant mean\r\n         ipsatized = response - mean_row) # Calculate individual response deviation from mean\r\n\r\ndata_dev %>% \r\n  glance(15)\r\n\r\n\r\nid\r\nitem\r\nresponse\r\nmean_row\r\nipsatized\r\n1\r\nTIPI1\r\n5\r\n4.5\r\n0.5\r\n1\r\nTIPI2\r\n3\r\n4.5\r\n-1.5\r\n1\r\nTIPI3\r\n6\r\n4.5\r\n1.5\r\n1\r\nTIPI4\r\n2\r\n4.5\r\n-2.5\r\n1\r\nTIPI5\r\n6\r\n4.5\r\n1.5\r\n1\r\nTIPI6\r\n6\r\n4.5\r\n1.5\r\n1\r\nTIPI7\r\n7\r\n4.5\r\n2.5\r\n1\r\nTIPI8\r\n2\r\n4.5\r\n-2.5\r\n1\r\nTIPI9\r\n7\r\n4.5\r\n2.5\r\n1\r\nTIPI10\r\n1\r\n4.5\r\n-3.5\r\n2\r\nTIPI1\r\n6\r\n4.9\r\n1.1\r\n2\r\nTIPI2\r\n7\r\n4.9\r\n2.1\r\n2\r\nTIPI3\r\n6\r\n4.9\r\n1.1\r\n2\r\nTIPI4\r\n7\r\n4.9\r\n2.1\r\n2\r\nTIPI5\r\n6\r\n4.9\r\n1.1\r\n\r\nNow, we can use pivot_wider() to transform the data back to its original format. Because we want the function output to be formatted as a list that contains the ipsatized data, raw data, and a correlation matrix of the two, it will be helpful to create two dataframes: an ipsatized dataframe and a raw dataframe.\r\n\r\n\r\n# Create ipsatized data frame\r\ndata_ips <- data_dev %>% \r\n  pivot_wider(id_cols = id, names_from = item, values_from = c(response, ipsatized)) %>%\r\n  select(id, contains(\"ipsatized\")) %>% \r\n   ungroup()\r\n\r\n# Create raw dataframe\r\ndata_raw <- data_dev %>% \r\n  pivot_wider(id_cols = id, names_from = item, values_from = c(response, ipsatized)) %>%\r\n  select(id, contains(\"response\")) %>% \r\n   ungroup()\r\n\r\n# Take a look at the results\r\ndata_ips %>% \r\n  glance(15)\r\n\r\n\r\nid\r\nipsatized_TIPI1\r\nipsatized_TIPI2\r\nipsatized_TIPI3\r\nipsatized_TIPI4\r\nipsatized_TIPI5\r\nipsatized_TIPI6\r\nipsatized_TIPI7\r\nipsatized_TIPI8\r\nipsatized_TIPI9\r\nipsatized_TIPI10\r\n1\r\n0.5\r\n-1.5\r\n1.5\r\n-2.5\r\n1.5\r\n1.5\r\n2.5\r\n-2.5\r\n2.5\r\n-3.5\r\n2\r\n1.1\r\n2.1\r\n1.1\r\n2.1\r\n1.1\r\n-1.9\r\n2.1\r\n0.1\r\n-3.9\r\n-3.9\r\n3\r\n0.4\r\n0.4\r\n0.4\r\n-4.6\r\n1.4\r\n-0.6\r\n0.4\r\n-0.6\r\n1.4\r\n1.4\r\n4\r\n1.0\r\n2.0\r\n2.0\r\n0.0\r\n2.0\r\n1.0\r\n0.0\r\n-4.0\r\n0.0\r\n-4.0\r\n5\r\n-3.1\r\n-1.1\r\n2.9\r\n-2.1\r\n1.9\r\n-0.1\r\n0.9\r\n0.9\r\n0.9\r\n-1.1\r\n6\r\n-0.2\r\n-2.2\r\n1.8\r\n-2.2\r\n1.8\r\n0.8\r\n1.8\r\n-1.2\r\n1.8\r\n-2.2\r\n7\r\n-1.9\r\n1.1\r\n0.1\r\n-1.9\r\n1.1\r\n2.1\r\n-1.9\r\n-0.9\r\n1.1\r\n1.1\r\n8\r\n-0.2\r\n0.8\r\n1.8\r\n-2.2\r\n2.8\r\n-0.2\r\n0.8\r\n0.8\r\n-1.2\r\n-3.2\r\n9\r\n-0.3\r\n0.7\r\n1.7\r\n-2.3\r\n-0.3\r\n0.7\r\n1.7\r\n-2.3\r\n2.7\r\n-2.3\r\n10\r\n-3.5\r\n1.5\r\n-1.5\r\n-3.5\r\n0.5\r\n2.5\r\n1.5\r\n0.5\r\n2.5\r\n-0.5\r\n11\r\n-0.3\r\n3.7\r\n-2.3\r\n3.7\r\n3.7\r\n-0.3\r\n-2.3\r\n-1.3\r\n-2.3\r\n-2.3\r\n12\r\n2.2\r\n-0.8\r\n-0.8\r\n-3.8\r\n2.2\r\n-0.8\r\n2.2\r\n0.2\r\n2.2\r\n-2.8\r\n13\r\n1.6\r\n-2.4\r\n1.6\r\n-3.4\r\n1.6\r\n0.6\r\n2.6\r\n-0.4\r\n0.6\r\n-2.4\r\n14\r\n-2.8\r\n-2.8\r\n1.2\r\n0.2\r\n2.2\r\n1.2\r\n2.2\r\n0.2\r\n1.2\r\n-2.8\r\n15\r\n-2.7\r\n-2.7\r\n-2.7\r\n2.3\r\n1.3\r\n3.3\r\n3.3\r\n3.3\r\n-2.7\r\n-2.7\r\n\r\ndata_raw %>% \r\n  glance(15)\r\n\r\n\r\nid\r\nresponse_TIPI1\r\nresponse_TIPI2\r\nresponse_TIPI3\r\nresponse_TIPI4\r\nresponse_TIPI5\r\nresponse_TIPI6\r\nresponse_TIPI7\r\nresponse_TIPI8\r\nresponse_TIPI9\r\nresponse_TIPI10\r\n1\r\n5\r\n3\r\n6\r\n2\r\n6\r\n6\r\n7\r\n2\r\n7\r\n1\r\n2\r\n6\r\n7\r\n6\r\n7\r\n6\r\n3\r\n7\r\n5\r\n1\r\n1\r\n3\r\n6\r\n6\r\n6\r\n1\r\n7\r\n5\r\n6\r\n5\r\n7\r\n7\r\n4\r\n6\r\n7\r\n7\r\n5\r\n7\r\n6\r\n5\r\n1\r\n5\r\n1\r\n5\r\n1\r\n3\r\n7\r\n2\r\n6\r\n4\r\n5\r\n5\r\n5\r\n3\r\n6\r\n4\r\n2\r\n6\r\n2\r\n6\r\n5\r\n6\r\n3\r\n6\r\n2\r\n7\r\n2\r\n5\r\n4\r\n2\r\n5\r\n6\r\n2\r\n3\r\n5\r\n5\r\n8\r\n4\r\n5\r\n6\r\n2\r\n7\r\n4\r\n5\r\n5\r\n3\r\n1\r\n9\r\n4\r\n5\r\n6\r\n2\r\n4\r\n5\r\n6\r\n2\r\n7\r\n2\r\n10\r\n1\r\n6\r\n3\r\n1\r\n5\r\n7\r\n6\r\n5\r\n7\r\n4\r\n11\r\n3\r\n7\r\n1\r\n7\r\n7\r\n3\r\n1\r\n2\r\n1\r\n1\r\n12\r\n7\r\n4\r\n4\r\n1\r\n7\r\n4\r\n7\r\n5\r\n7\r\n2\r\n13\r\n6\r\n2\r\n6\r\n1\r\n6\r\n5\r\n7\r\n4\r\n5\r\n2\r\n14\r\n2\r\n2\r\n6\r\n5\r\n7\r\n6\r\n7\r\n5\r\n6\r\n2\r\n15\r\n1\r\n1\r\n1\r\n6\r\n5\r\n7\r\n7\r\n7\r\n1\r\n1\r\n\r\nLastly, let’s create that list.\r\n\r\n\r\nlist_output <- list(\"ipsatized\" = data_ips,\r\n          \"raw\" = data_raw,\r\n          \"correlation_matrix\" = cor(data_ips, data_raw))\r\n\r\nlist_output\r\n\r\n\r\n$ipsatized\r\n# A tibble: 2,495 x 11\r\n      id ipsatized_TIPI1 ipsatized_TIPI2 ipsatized_TIPI3\r\n   <int>           <dbl>           <dbl>           <dbl>\r\n 1     1           0.5            -1.5             1.5  \r\n 2     2           1.1             2.1             1.1  \r\n 3     3           0.400           0.400           0.400\r\n 4     4           1               2               2    \r\n 5     5          -3.1            -1.1             2.9  \r\n 6     6          -0.200          -2.2             1.8  \r\n 7     7          -1.9             1.1             0.100\r\n 8     8          -0.200           0.8             1.8  \r\n 9     9          -0.300           0.7             1.7  \r\n10    10          -3.5             1.5            -1.5  \r\n# ... with 2,485 more rows, and 7 more variables:\r\n#   ipsatized_TIPI4 <dbl>, ipsatized_TIPI5 <dbl>,\r\n#   ipsatized_TIPI6 <dbl>, ipsatized_TIPI7 <dbl>,\r\n#   ipsatized_TIPI8 <dbl>, ipsatized_TIPI9 <dbl>,\r\n#   ipsatized_TIPI10 <dbl>\r\n\r\n$raw\r\n# A tibble: 2,495 x 11\r\n      id response_TIPI1 response_TIPI2 response_TIPI3 response_TIPI4\r\n   <int>          <int>          <int>          <int>          <int>\r\n 1     1              5              3              6              2\r\n 2     2              6              7              6              7\r\n 3     3              6              6              6              1\r\n 4     4              6              7              7              5\r\n 5     5              1              3              7              2\r\n 6     6              4              2              6              2\r\n 7     7              2              5              4              2\r\n 8     8              4              5              6              2\r\n 9     9              4              5              6              2\r\n10    10              1              6              3              1\r\n# ... with 2,485 more rows, and 6 more variables:\r\n#   response_TIPI5 <int>, response_TIPI6 <int>, response_TIPI7 <int>,\r\n#   response_TIPI8 <int>, response_TIPI9 <int>, response_TIPI10 <int>\r\n\r\n$correlation_matrix\r\n                           id response_TIPI1 response_TIPI2\r\nid                1.000000000    -0.03087740    -0.03727441\r\nipsatized_TIPI1  -0.021481713     0.95997515    -0.11340834\r\nipsatized_TIPI2  -0.027501605    -0.12071784     0.95428074\r\nipsatized_TIPI3  -0.036290745     0.02535938    -0.16688353\r\nipsatized_TIPI4   0.022218869    -0.25970548     0.12817941\r\nipsatized_TIPI5   0.017044441     0.15867518    -0.13509164\r\nipsatized_TIPI6   0.033065029    -0.68318241    -0.07328539\r\nipsatized_TIPI7   0.021550310     0.19604318    -0.39102208\r\nipsatized_TIPI8   0.028246853    -0.09883568     0.05362126\r\nipsatized_TIPI9  -0.029634489     0.06676858    -0.27632275\r\nipsatized_TIPI10 -0.005017054    -0.22041641    -0.06129857\r\n                 response_TIPI3 response_TIPI4 response_TIPI5\r\nid                 -0.045915845    0.011284963   0.0008224971\r\nipsatized_TIPI1     0.031167709   -0.244068520   0.1736167712\r\nipsatized_TIPI2    -0.167224238    0.148187176  -0.1206510887\r\nipsatized_TIPI3     0.948872899   -0.298764735   0.0086683433\r\nipsatized_TIPI4    -0.307516250    0.962139678  -0.2550686241\r\nipsatized_TIPI5    -0.005073157   -0.256663167   0.9192189953\r\nipsatized_TIPI6    -0.024670231    0.073760081  -0.2270060851\r\nipsatized_TIPI7     0.007475973   -0.008942264   0.0736922080\r\nipsatized_TIPI8    -0.550478491    0.158821663  -0.0270662628\r\nipsatized_TIPI9     0.268938383   -0.690397982   0.0655434271\r\nipsatized_TIPI10   -0.108530999   -0.002177791  -0.3767678405\r\n                 response_TIPI6 response_TIPI7 response_TIPI8\r\nid                  0.021000522    0.007644219     0.01618021\r\nipsatized_TIPI1    -0.666541441    0.170445729    -0.08266381\r\nipsatized_TIPI2    -0.038939637   -0.403279907     0.06565301\r\nipsatized_TIPI3     0.015568018   -0.020080341    -0.54989652\r\nipsatized_TIPI4     0.091005873   -0.050084957     0.15131155\r\nipsatized_TIPI5    -0.203227013    0.024189448    -0.02356731\r\nipsatized_TIPI6     0.953180313   -0.215281446    -0.08954131\r\nipsatized_TIPI7    -0.162399055    0.949232042    -0.08558253\r\nipsatized_TIPI8    -0.067303304   -0.119072017     0.95695523\r\nipsatized_TIPI9    -0.009290563   -0.028893032    -0.33029253\r\nipsatized_TIPI10    0.040201343   -0.228842712    -0.10619799\r\n                 response_TIPI9 response_TIPI10\r\nid                  -0.03949432    -0.017594425\r\nipsatized_TIPI1      0.09172718    -0.187414036\r\nipsatized_TIPI2     -0.26483551    -0.031356832\r\nipsatized_TIPI3      0.29771049    -0.076414836\r\nipsatized_TIPI4     -0.68790076     0.007123348\r\nipsatized_TIPI5      0.08228079    -0.365950413\r\nipsatized_TIPI6     -0.02645471     0.029629981\r\nipsatized_TIPI7      0.01615832    -0.176200329\r\nipsatized_TIPI8     -0.32648284    -0.089488624\r\nipsatized_TIPI9      0.95761526    -0.057303325\r\nipsatized_TIPI10    -0.06741043     0.941250723\r\n\r\nThis list is what we set out to create! We’ve achieved our goal.\r\nNow that we’ve solved this problem in a specific case, we can begin to generalize it to a function. Or, rather, a set of functions!\r\nApplying specific case to generalized functions\r\nSince we want each function to only do one task, we can first outline the individual tasks that make up the ipsatization process.\r\nAdd an ID variable to the dataframe\r\nPivot the data to a longer format\r\nCalculate the mean of each row and transform each response by subtracting the row mean from it\r\nPivot the data back to a wider format\r\nCreate a list to organize the output\r\nNow we can set out to make a function to complete each task. These functions don’t ever have to be used on their own; in the end, they’ll all be combined into a final, single function. This may seem like it’s making work more complicated, but this approach enhances readability of your code and aids in troubleshooting errors.\r\nSince we’ve done the majority of the problem solving already, we can essentially copy and paste our code from above, making sure to adapt as necessary to the function format. Luckily, for the current tutorial, these changes mostly consist of changing the name of the dataframe input to “df,” which is the name of our only argument in this function./ After we build each function, we can test that it works with some datasets to ensure it works.\r\nAdd an ID variable to the dataframe\r\n\r\n\r\nadd_id <- function(df) {\r\n  df %>%\r\n    mutate(id = c(1:nrow(df)))\r\n}\r\n\r\n\r\n\r\n\r\n\r\n# Test it out\r\ntest1 <- data %>% \r\n  add_id()\r\n\r\ntest2 <- iris %>% \r\n  add_id()\r\n\r\ntest1 %>%  \r\n  glance(5)\r\n\r\n\r\nTIPI1\r\nTIPI2\r\nTIPI3\r\nTIPI4\r\nTIPI5\r\nTIPI6\r\nTIPI7\r\nTIPI8\r\nTIPI9\r\nTIPI10\r\nid\r\n5\r\n3\r\n6\r\n2\r\n6\r\n6\r\n7\r\n2\r\n7\r\n1\r\n1\r\n6\r\n7\r\n6\r\n7\r\n6\r\n3\r\n7\r\n5\r\n1\r\n1\r\n2\r\n6\r\n6\r\n6\r\n1\r\n7\r\n5\r\n6\r\n5\r\n7\r\n7\r\n3\r\n6\r\n7\r\n7\r\n5\r\n7\r\n6\r\n5\r\n1\r\n5\r\n1\r\n4\r\n1\r\n3\r\n7\r\n2\r\n6\r\n4\r\n5\r\n5\r\n5\r\n3\r\n5\r\n\r\ntest2 %>%  \r\n  glance(5)\r\n\r\n\r\nSepal.Length\r\nSepal.Width\r\nPetal.Length\r\nPetal.Width\r\nSpecies\r\nid\r\n5.1\r\n3.5\r\n1.4\r\n0.2\r\nsetosa\r\n1\r\n4.9\r\n3.0\r\n1.4\r\n0.2\r\nsetosa\r\n2\r\n4.7\r\n3.2\r\n1.3\r\n0.2\r\nsetosa\r\n3\r\n4.6\r\n3.1\r\n1.5\r\n0.2\r\nsetosa\r\n4\r\n5.0\r\n3.6\r\n1.4\r\n0.2\r\nsetosa\r\n5\r\n\r\nIt works! However, when looking at the output for the dataframe iris, you may notice a difference between it and the specific case in which we originally wrote this code: This dataset contains character data in addition to numeric data. Before we go any further, we have to write code that extracts only numeric columns from the dataframe of interest.\r\n1.5. Select only numeric columns from dataframe\r\nWe can accomplish this using the map_lgl() function from the purrr package, which we’ve discussed in previous posts as well. We specify that if the sum of all possible numeric columns in a dataframe is 0, we stop the loop and throw an error message else return the dataframe. This will ensure that all the columns in the dataframe we are working with are numeric. We are using map_lgl from the purrr package which maps the is.numeric function to every column in the dataframe.\r\n\r\n\r\niris[ , purrr::map_lgl(iris, is.numeric)] %>% \r\n  glance(10)\r\n\r\n\r\nSepal.Length\r\nSepal.Width\r\nPetal.Length\r\nPetal.Width\r\n5.1\r\n3.5\r\n1.4\r\n0.2\r\n4.9\r\n3.0\r\n1.4\r\n0.2\r\n4.7\r\n3.2\r\n1.3\r\n0.2\r\n4.6\r\n3.1\r\n1.5\r\n0.2\r\n5.0\r\n3.6\r\n1.4\r\n0.2\r\n5.4\r\n3.9\r\n1.7\r\n0.4\r\n4.6\r\n3.4\r\n1.4\r\n0.3\r\n5.0\r\n3.4\r\n1.5\r\n0.2\r\n4.4\r\n2.9\r\n1.4\r\n0.2\r\n4.9\r\n3.1\r\n1.5\r\n0.1\r\n\r\nJust like before, we can now translate that code into a function. This time, we’ll also add a condition to our function: If there are no numeric columns in the dataset, the function will throw an error saying so. If there is at least one numeric column, the function will run as normal.\r\n\r\n\r\njust_num <- function(df) {\r\n  if(sum(purrr::map_lgl(df, is.numeric)) == 0) {\r\n    stop(\"No numeric columns.\")\r\n  }\r\n    else{\r\n      df1 <- df[ , purrr::map_lgl(df, is.numeric)]\r\n      df1\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n# Test it out\r\ntest1 <- test1 %>% \r\n  just_num()\r\n\r\ntest2 <- test2 %>% \r\n  just_num()\r\n\r\ntest1 %>% \r\n  glance(15)\r\n\r\n\r\nTIPI1\r\nTIPI2\r\nTIPI3\r\nTIPI4\r\nTIPI5\r\nTIPI6\r\nTIPI7\r\nTIPI8\r\nTIPI9\r\nTIPI10\r\nid\r\n5\r\n3\r\n6\r\n2\r\n6\r\n6\r\n7\r\n2\r\n7\r\n1\r\n1\r\n6\r\n7\r\n6\r\n7\r\n6\r\n3\r\n7\r\n5\r\n1\r\n1\r\n2\r\n6\r\n6\r\n6\r\n1\r\n7\r\n5\r\n6\r\n5\r\n7\r\n7\r\n3\r\n6\r\n7\r\n7\r\n5\r\n7\r\n6\r\n5\r\n1\r\n5\r\n1\r\n4\r\n1\r\n3\r\n7\r\n2\r\n6\r\n4\r\n5\r\n5\r\n5\r\n3\r\n5\r\n4\r\n2\r\n6\r\n2\r\n6\r\n5\r\n6\r\n3\r\n6\r\n2\r\n6\r\n2\r\n5\r\n4\r\n2\r\n5\r\n6\r\n2\r\n3\r\n5\r\n5\r\n7\r\n4\r\n5\r\n6\r\n2\r\n7\r\n4\r\n5\r\n5\r\n3\r\n1\r\n8\r\n4\r\n5\r\n6\r\n2\r\n4\r\n5\r\n6\r\n2\r\n7\r\n2\r\n9\r\n1\r\n6\r\n3\r\n1\r\n5\r\n7\r\n6\r\n5\r\n7\r\n4\r\n10\r\n3\r\n7\r\n1\r\n7\r\n7\r\n3\r\n1\r\n2\r\n1\r\n1\r\n11\r\n7\r\n4\r\n4\r\n1\r\n7\r\n4\r\n7\r\n5\r\n7\r\n2\r\n12\r\n6\r\n2\r\n6\r\n1\r\n6\r\n5\r\n7\r\n4\r\n5\r\n2\r\n13\r\n2\r\n2\r\n6\r\n5\r\n7\r\n6\r\n7\r\n5\r\n6\r\n2\r\n14\r\n1\r\n1\r\n1\r\n6\r\n5\r\n7\r\n7\r\n7\r\n1\r\n1\r\n15\r\n\r\ntest2 %>% \r\n  glance(15)\r\n\r\n\r\nSepal.Length\r\nSepal.Width\r\nPetal.Length\r\nPetal.Width\r\nid\r\n5.1\r\n3.5\r\n1.4\r\n0.2\r\n1\r\n4.9\r\n3.0\r\n1.4\r\n0.2\r\n2\r\n4.7\r\n3.2\r\n1.3\r\n0.2\r\n3\r\n4.6\r\n3.1\r\n1.5\r\n0.2\r\n4\r\n5.0\r\n3.6\r\n1.4\r\n0.2\r\n5\r\n5.4\r\n3.9\r\n1.7\r\n0.4\r\n6\r\n4.6\r\n3.4\r\n1.4\r\n0.3\r\n7\r\n5.0\r\n3.4\r\n1.5\r\n0.2\r\n8\r\n4.4\r\n2.9\r\n1.4\r\n0.2\r\n9\r\n4.9\r\n3.1\r\n1.5\r\n0.1\r\n10\r\n5.4\r\n3.7\r\n1.5\r\n0.2\r\n11\r\n4.8\r\n3.4\r\n1.6\r\n0.2\r\n12\r\n4.8\r\n3.0\r\n1.4\r\n0.1\r\n13\r\n4.3\r\n3.0\r\n1.1\r\n0.1\r\n14\r\n5.8\r\n4.0\r\n1.2\r\n0.2\r\n15\r\n\r\nCritically, this function will allow our final function to generalize to multiple different datasets. With that done, we can continue with the rest of our outlined tasks.\r\nPivot the data to a longer format\r\n\r\n\r\nlengthen_data <- function(df) {\r\n  df %>% \r\n  pivot_longer(cols = !id, names_to = \"item\", values_to = \"response\")\r\n}\r\n\r\n\r\n\r\n\r\n\r\n# Test it out\r\ntest1 <- test1 %>% \r\n  lengthen_data()\r\n\r\ntest2 <- test2 %>% \r\n  lengthen_data()\r\n\r\ntest1 %>% \r\n  glance(15)\r\n\r\n\r\nid\r\nitem\r\nresponse\r\n1\r\nTIPI1\r\n5\r\n1\r\nTIPI2\r\n3\r\n1\r\nTIPI3\r\n6\r\n1\r\nTIPI4\r\n2\r\n1\r\nTIPI5\r\n6\r\n1\r\nTIPI6\r\n6\r\n1\r\nTIPI7\r\n7\r\n1\r\nTIPI8\r\n2\r\n1\r\nTIPI9\r\n7\r\n1\r\nTIPI10\r\n1\r\n2\r\nTIPI1\r\n6\r\n2\r\nTIPI2\r\n7\r\n2\r\nTIPI3\r\n6\r\n2\r\nTIPI4\r\n7\r\n2\r\nTIPI5\r\n6\r\n\r\ntest2 %>% \r\n  glance(15)\r\n\r\n\r\nid\r\nitem\r\nresponse\r\n1\r\nSepal.Length\r\n5.1\r\n1\r\nSepal.Width\r\n3.5\r\n1\r\nPetal.Length\r\n1.4\r\n1\r\nPetal.Width\r\n0.2\r\n2\r\nSepal.Length\r\n4.9\r\n2\r\nSepal.Width\r\n3.0\r\n2\r\nPetal.Length\r\n1.4\r\n2\r\nPetal.Width\r\n0.2\r\n3\r\nSepal.Length\r\n4.7\r\n3\r\nSepal.Width\r\n3.2\r\n3\r\nPetal.Length\r\n1.3\r\n3\r\nPetal.Width\r\n0.2\r\n4\r\nSepal.Length\r\n4.6\r\n4\r\nSepal.Width\r\n3.1\r\n4\r\nPetal.Length\r\n1.5\r\n\r\nCalculate the mean of each row and transform each response by subtracting the row mean from it\r\n\r\n\r\ntransform_data <- function(df) {\r\n  df %>% \r\n  group_by(id) %>% # Group by participant ID\r\n  mutate(mean_row = mean(response, na.rm = TRUE), # Calculate participant mean\r\n         ipsatized = response - mean_row) # Calculate individual response deviation from mean\r\n}\r\n\r\n\r\n\r\n\r\n\r\n# Test it out\r\ntest1 <- test1 %>% \r\n  transform_data()\r\n\r\ntest2 <- test2 %>% \r\n  transform_data()\r\n\r\ntest1 %>% \r\n  glance(15)\r\n\r\n\r\nid\r\nitem\r\nresponse\r\nmean_row\r\nipsatized\r\n1\r\nTIPI1\r\n5\r\n4.5\r\n0.5\r\n1\r\nTIPI2\r\n3\r\n4.5\r\n-1.5\r\n1\r\nTIPI3\r\n6\r\n4.5\r\n1.5\r\n1\r\nTIPI4\r\n2\r\n4.5\r\n-2.5\r\n1\r\nTIPI5\r\n6\r\n4.5\r\n1.5\r\n1\r\nTIPI6\r\n6\r\n4.5\r\n1.5\r\n1\r\nTIPI7\r\n7\r\n4.5\r\n2.5\r\n1\r\nTIPI8\r\n2\r\n4.5\r\n-2.5\r\n1\r\nTIPI9\r\n7\r\n4.5\r\n2.5\r\n1\r\nTIPI10\r\n1\r\n4.5\r\n-3.5\r\n2\r\nTIPI1\r\n6\r\n4.9\r\n1.1\r\n2\r\nTIPI2\r\n7\r\n4.9\r\n2.1\r\n2\r\nTIPI3\r\n6\r\n4.9\r\n1.1\r\n2\r\nTIPI4\r\n7\r\n4.9\r\n2.1\r\n2\r\nTIPI5\r\n6\r\n4.9\r\n1.1\r\n\r\ntest2 %>% \r\n  glance(15)\r\n\r\n\r\nid\r\nitem\r\nresponse\r\nmean_row\r\nipsatized\r\n1\r\nSepal.Length\r\n5.1\r\n2.550\r\n2.550\r\n1\r\nSepal.Width\r\n3.5\r\n2.550\r\n0.950\r\n1\r\nPetal.Length\r\n1.4\r\n2.550\r\n-1.150\r\n1\r\nPetal.Width\r\n0.2\r\n2.550\r\n-2.350\r\n2\r\nSepal.Length\r\n4.9\r\n2.375\r\n2.525\r\n2\r\nSepal.Width\r\n3.0\r\n2.375\r\n0.625\r\n2\r\nPetal.Length\r\n1.4\r\n2.375\r\n-0.975\r\n2\r\nPetal.Width\r\n0.2\r\n2.375\r\n-2.175\r\n3\r\nSepal.Length\r\n4.7\r\n2.350\r\n2.350\r\n3\r\nSepal.Width\r\n3.2\r\n2.350\r\n0.850\r\n3\r\nPetal.Length\r\n1.3\r\n2.350\r\n-1.050\r\n3\r\nPetal.Width\r\n0.2\r\n2.350\r\n-2.150\r\n4\r\nSepal.Length\r\n4.6\r\n2.350\r\n2.250\r\n4\r\nSepal.Width\r\n3.1\r\n2.350\r\n0.750\r\n4\r\nPetal.Length\r\n1.5\r\n2.350\r\n-0.850\r\n\r\nPivot the data back to a wider format\r\n\r\n\r\nwiden_data <- function(df) {\r\n  # Create ipsatized data frame\r\ndata_ips <- df %>% \r\n  pivot_wider(id_cols = id, names_from = item, values_from = c(response, ipsatized)) %>%\r\n  select(id, contains(\"ipsatized\")) %>% \r\n   ungroup()\r\n\r\n# Create raw dataframe\r\ndata_raw <- df %>% \r\n  pivot_wider(id_cols = id, names_from = item, values_from = c(response, ipsatized)) %>%\r\n  select(id, contains(\"response\")) %>% \r\n   ungroup()\r\n\r\noutputlist <- list(\"data_ips\" = data_ips, \r\n                   \"data_raw\" = data_raw)\r\n\r\nreturn(outputlist)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n# Test it out\r\ntest1 <- test1 %>% \r\n  widen_data()\r\n\r\ntest2 <- test2 %>% \r\n  widen_data()\r\n\r\ntest1\r\n\r\n\r\n$data_ips\r\n# A tibble: 2,495 x 11\r\n      id ipsatized_TIPI1 ipsatized_TIPI2 ipsatized_TIPI3\r\n   <int>           <dbl>           <dbl>           <dbl>\r\n 1     1           0.5            -1.5             1.5  \r\n 2     2           1.1             2.1             1.1  \r\n 3     3           0.400           0.400           0.400\r\n 4     4           1               2               2    \r\n 5     5          -3.1            -1.1             2.9  \r\n 6     6          -0.200          -2.2             1.8  \r\n 7     7          -1.9             1.1             0.100\r\n 8     8          -0.200           0.8             1.8  \r\n 9     9          -0.300           0.7             1.7  \r\n10    10          -3.5             1.5            -1.5  \r\n# ... with 2,485 more rows, and 7 more variables:\r\n#   ipsatized_TIPI4 <dbl>, ipsatized_TIPI5 <dbl>,\r\n#   ipsatized_TIPI6 <dbl>, ipsatized_TIPI7 <dbl>,\r\n#   ipsatized_TIPI8 <dbl>, ipsatized_TIPI9 <dbl>,\r\n#   ipsatized_TIPI10 <dbl>\r\n\r\n$data_raw\r\n# A tibble: 2,495 x 11\r\n      id response_TIPI1 response_TIPI2 response_TIPI3 response_TIPI4\r\n   <int>          <int>          <int>          <int>          <int>\r\n 1     1              5              3              6              2\r\n 2     2              6              7              6              7\r\n 3     3              6              6              6              1\r\n 4     4              6              7              7              5\r\n 5     5              1              3              7              2\r\n 6     6              4              2              6              2\r\n 7     7              2              5              4              2\r\n 8     8              4              5              6              2\r\n 9     9              4              5              6              2\r\n10    10              1              6              3              1\r\n# ... with 2,485 more rows, and 6 more variables:\r\n#   response_TIPI5 <int>, response_TIPI6 <int>, response_TIPI7 <int>,\r\n#   response_TIPI8 <int>, response_TIPI9 <int>, response_TIPI10 <int>\r\n\r\ntest2\r\n\r\n\r\n$data_ips\r\n# A tibble: 150 x 5\r\n      id ipsatized_Sepal.Len~ ipsatized_Sepal.Wid~ ipsatized_Petal.Le~\r\n   <int>                <dbl>                <dbl>               <dbl>\r\n 1     1                 2.55                0.95               -1.15 \r\n 2     2                 2.53                0.625              -0.975\r\n 3     3                 2.35                0.85               -1.05 \r\n 4     4                 2.25                0.75               -0.85 \r\n 5     5                 2.45                1.05               -1.15 \r\n 6     6                 2.55                1.05               -1.15 \r\n 7     7                 2.17                0.975              -1.02 \r\n 8     8                 2.48                0.875              -1.02 \r\n 9     9                 2.18                0.675              -0.825\r\n10    10                 2.5                 0.7                -0.9  \r\n# ... with 140 more rows, and 1 more variable:\r\n#   ipsatized_Petal.Width <dbl>\r\n\r\n$data_raw\r\n# A tibble: 150 x 5\r\n      id response_Sepal.Leng~ response_Sepal.Width response_Petal.Len~\r\n   <int>                <dbl>                <dbl>               <dbl>\r\n 1     1                  5.1                  3.5                 1.4\r\n 2     2                  4.9                  3                   1.4\r\n 3     3                  4.7                  3.2                 1.3\r\n 4     4                  4.6                  3.1                 1.5\r\n 5     5                  5                    3.6                 1.4\r\n 6     6                  5.4                  3.9                 1.7\r\n 7     7                  4.6                  3.4                 1.4\r\n 8     8                  5                    3.4                 1.5\r\n 9     9                  4.4                  2.9                 1.4\r\n10    10                  4.9                  3.1                 1.5\r\n# ... with 140 more rows, and 1 more variable:\r\n#   response_Petal.Width <dbl>\r\n\r\nCreate a list to organize the output\r\n\r\n\r\nipsatize_list <- function(df) {\r\n  list(\"ipsatized\" = df$data_ips,\r\n          \"raw\" = df$data_raw,\r\n          \"correlation_matrix\" = cor(df$data_ips, df$data_raw))\r\n}\r\n\r\n# list(\"ipsatized\" = test2$data_ips,\r\n#           \"raw\" = test2$data_raw,\r\n#           \"correlation_matrix\" = cor(test2$data_ips, test2$data_raw))\r\n\r\n\r\n\r\n\r\n\r\n# Test it out\r\ntest1 %>%\r\n  ipsatize_list()\r\n\r\n\r\n$ipsatized\r\n# A tibble: 2,495 x 11\r\n      id ipsatized_TIPI1 ipsatized_TIPI2 ipsatized_TIPI3\r\n   <int>           <dbl>           <dbl>           <dbl>\r\n 1     1           0.5            -1.5             1.5  \r\n 2     2           1.1             2.1             1.1  \r\n 3     3           0.400           0.400           0.400\r\n 4     4           1               2               2    \r\n 5     5          -3.1            -1.1             2.9  \r\n 6     6          -0.200          -2.2             1.8  \r\n 7     7          -1.9             1.1             0.100\r\n 8     8          -0.200           0.8             1.8  \r\n 9     9          -0.300           0.7             1.7  \r\n10    10          -3.5             1.5            -1.5  \r\n# ... with 2,485 more rows, and 7 more variables:\r\n#   ipsatized_TIPI4 <dbl>, ipsatized_TIPI5 <dbl>,\r\n#   ipsatized_TIPI6 <dbl>, ipsatized_TIPI7 <dbl>,\r\n#   ipsatized_TIPI8 <dbl>, ipsatized_TIPI9 <dbl>,\r\n#   ipsatized_TIPI10 <dbl>\r\n\r\n$raw\r\n# A tibble: 2,495 x 11\r\n      id response_TIPI1 response_TIPI2 response_TIPI3 response_TIPI4\r\n   <int>          <int>          <int>          <int>          <int>\r\n 1     1              5              3              6              2\r\n 2     2              6              7              6              7\r\n 3     3              6              6              6              1\r\n 4     4              6              7              7              5\r\n 5     5              1              3              7              2\r\n 6     6              4              2              6              2\r\n 7     7              2              5              4              2\r\n 8     8              4              5              6              2\r\n 9     9              4              5              6              2\r\n10    10              1              6              3              1\r\n# ... with 2,485 more rows, and 6 more variables:\r\n#   response_TIPI5 <int>, response_TIPI6 <int>, response_TIPI7 <int>,\r\n#   response_TIPI8 <int>, response_TIPI9 <int>, response_TIPI10 <int>\r\n\r\n$correlation_matrix\r\n                           id response_TIPI1 response_TIPI2\r\nid                1.000000000    -0.03087740    -0.03727441\r\nipsatized_TIPI1  -0.021481713     0.95997515    -0.11340834\r\nipsatized_TIPI2  -0.027501605    -0.12071784     0.95428074\r\nipsatized_TIPI3  -0.036290745     0.02535938    -0.16688353\r\nipsatized_TIPI4   0.022218869    -0.25970548     0.12817941\r\nipsatized_TIPI5   0.017044441     0.15867518    -0.13509164\r\nipsatized_TIPI6   0.033065029    -0.68318241    -0.07328539\r\nipsatized_TIPI7   0.021550310     0.19604318    -0.39102208\r\nipsatized_TIPI8   0.028246853    -0.09883568     0.05362126\r\nipsatized_TIPI9  -0.029634489     0.06676858    -0.27632275\r\nipsatized_TIPI10 -0.005017054    -0.22041641    -0.06129857\r\n                 response_TIPI3 response_TIPI4 response_TIPI5\r\nid                 -0.045915845    0.011284963   0.0008224971\r\nipsatized_TIPI1     0.031167709   -0.244068520   0.1736167712\r\nipsatized_TIPI2    -0.167224238    0.148187176  -0.1206510887\r\nipsatized_TIPI3     0.948872899   -0.298764735   0.0086683433\r\nipsatized_TIPI4    -0.307516250    0.962139678  -0.2550686241\r\nipsatized_TIPI5    -0.005073157   -0.256663167   0.9192189953\r\nipsatized_TIPI6    -0.024670231    0.073760081  -0.2270060851\r\nipsatized_TIPI7     0.007475973   -0.008942264   0.0736922080\r\nipsatized_TIPI8    -0.550478491    0.158821663  -0.0270662628\r\nipsatized_TIPI9     0.268938383   -0.690397982   0.0655434271\r\nipsatized_TIPI10   -0.108530999   -0.002177791  -0.3767678405\r\n                 response_TIPI6 response_TIPI7 response_TIPI8\r\nid                  0.021000522    0.007644219     0.01618021\r\nipsatized_TIPI1    -0.666541441    0.170445729    -0.08266381\r\nipsatized_TIPI2    -0.038939637   -0.403279907     0.06565301\r\nipsatized_TIPI3     0.015568018   -0.020080341    -0.54989652\r\nipsatized_TIPI4     0.091005873   -0.050084957     0.15131155\r\nipsatized_TIPI5    -0.203227013    0.024189448    -0.02356731\r\nipsatized_TIPI6     0.953180313   -0.215281446    -0.08954131\r\nipsatized_TIPI7    -0.162399055    0.949232042    -0.08558253\r\nipsatized_TIPI8    -0.067303304   -0.119072017     0.95695523\r\nipsatized_TIPI9    -0.009290563   -0.028893032    -0.33029253\r\nipsatized_TIPI10    0.040201343   -0.228842712    -0.10619799\r\n                 response_TIPI9 response_TIPI10\r\nid                  -0.03949432    -0.017594425\r\nipsatized_TIPI1      0.09172718    -0.187414036\r\nipsatized_TIPI2     -0.26483551    -0.031356832\r\nipsatized_TIPI3      0.29771049    -0.076414836\r\nipsatized_TIPI4     -0.68790076     0.007123348\r\nipsatized_TIPI5      0.08228079    -0.365950413\r\nipsatized_TIPI6     -0.02645471     0.029629981\r\nipsatized_TIPI7      0.01615832    -0.176200329\r\nipsatized_TIPI8     -0.32648284    -0.089488624\r\nipsatized_TIPI9      0.95761526    -0.057303325\r\nipsatized_TIPI10    -0.06741043     0.941250723\r\n\r\ntest2 %>%\r\n  ipsatize_list()\r\n\r\n\r\n$ipsatized\r\n# A tibble: 150 x 5\r\n      id ipsatized_Sepal.Len~ ipsatized_Sepal.Wid~ ipsatized_Petal.Le~\r\n   <int>                <dbl>                <dbl>               <dbl>\r\n 1     1                 2.55                0.95               -1.15 \r\n 2     2                 2.53                0.625              -0.975\r\n 3     3                 2.35                0.85               -1.05 \r\n 4     4                 2.25                0.75               -0.85 \r\n 5     5                 2.45                1.05               -1.15 \r\n 6     6                 2.55                1.05               -1.15 \r\n 7     7                 2.17                0.975              -1.02 \r\n 8     8                 2.48                0.875              -1.02 \r\n 9     9                 2.18                0.675              -0.825\r\n10    10                 2.5                 0.7                -0.9  \r\n# ... with 140 more rows, and 1 more variable:\r\n#   ipsatized_Petal.Width <dbl>\r\n\r\n$raw\r\n# A tibble: 150 x 5\r\n      id response_Sepal.Leng~ response_Sepal.Width response_Petal.Len~\r\n   <int>                <dbl>                <dbl>               <dbl>\r\n 1     1                  5.1                  3.5                 1.4\r\n 2     2                  4.9                  3                   1.4\r\n 3     3                  4.7                  3.2                 1.3\r\n 4     4                  4.6                  3.1                 1.5\r\n 5     5                  5                    3.6                 1.4\r\n 6     6                  5.4                  3.9                 1.7\r\n 7     7                  4.6                  3.4                 1.4\r\n 8     8                  5                    3.4                 1.5\r\n 9     9                  4.4                  2.9                 1.4\r\n10    10                  4.9                  3.1                 1.5\r\n# ... with 140 more rows, and 1 more variable:\r\n#   response_Petal.Width <dbl>\r\n\r\n$correlation_matrix\r\n                                id response_Sepal.Length\r\nid                      1.00000000             0.7166763\r\nipsatized_Sepal.Length -0.25714094             0.3325941\r\nipsatized_Sepal.Width  -0.86197818            -0.8057327\r\nipsatized_Petal.Length  0.87192559             0.7855245\r\nipsatized_Petal.Width   0.08708789            -0.4736449\r\n                       response_Sepal.Width response_Petal.Length\r\nid                               -0.4023010             0.8826365\r\nipsatized_Sepal.Length            0.2741067            -0.1309424\r\nipsatized_Sepal.Width             0.6253708            -0.9690120\r\nipsatized_Petal.Length           -0.5686501             0.9834439\r\nipsatized_Petal.Width            -0.4460778            -0.1048994\r\n                       response_Petal.Width\r\nid                                0.9000274\r\nipsatized_Sepal.Length           -0.2411263\r\nipsatized_Sepal.Width            -0.9271668\r\nipsatized_Petal.Length            0.9327515\r\nipsatized_Petal.Width             0.0736434\r\n\r\nNow let’s combine all of these functions together!\r\n\r\n\r\nipsatize <- function(df) {\r\n  df %>% \r\n    just_num() %>% \r\n    add_id() %>% \r\n    lengthen_data() %>% \r\n    transform_data() %>% \r\n    widen_data() %>% \r\n    ipsatize_list()\r\n}\r\n\r\n\r\n\r\n\r\n\r\n# Test it out\r\nipsatize(data)\r\n\r\n\r\n$ipsatized\r\n# A tibble: 2,495 x 11\r\n      id ipsatized_TIPI1 ipsatized_TIPI2 ipsatized_TIPI3\r\n   <int>           <dbl>           <dbl>           <dbl>\r\n 1     1           0.5            -1.5             1.5  \r\n 2     2           1.1             2.1             1.1  \r\n 3     3           0.400           0.400           0.400\r\n 4     4           1               2               2    \r\n 5     5          -3.1            -1.1             2.9  \r\n 6     6          -0.200          -2.2             1.8  \r\n 7     7          -1.9             1.1             0.100\r\n 8     8          -0.200           0.8             1.8  \r\n 9     9          -0.300           0.7             1.7  \r\n10    10          -3.5             1.5            -1.5  \r\n# ... with 2,485 more rows, and 7 more variables:\r\n#   ipsatized_TIPI4 <dbl>, ipsatized_TIPI5 <dbl>,\r\n#   ipsatized_TIPI6 <dbl>, ipsatized_TIPI7 <dbl>,\r\n#   ipsatized_TIPI8 <dbl>, ipsatized_TIPI9 <dbl>,\r\n#   ipsatized_TIPI10 <dbl>\r\n\r\n$raw\r\n# A tibble: 2,495 x 11\r\n      id response_TIPI1 response_TIPI2 response_TIPI3 response_TIPI4\r\n   <int>          <int>          <int>          <int>          <int>\r\n 1     1              5              3              6              2\r\n 2     2              6              7              6              7\r\n 3     3              6              6              6              1\r\n 4     4              6              7              7              5\r\n 5     5              1              3              7              2\r\n 6     6              4              2              6              2\r\n 7     7              2              5              4              2\r\n 8     8              4              5              6              2\r\n 9     9              4              5              6              2\r\n10    10              1              6              3              1\r\n# ... with 2,485 more rows, and 6 more variables:\r\n#   response_TIPI5 <int>, response_TIPI6 <int>, response_TIPI7 <int>,\r\n#   response_TIPI8 <int>, response_TIPI9 <int>, response_TIPI10 <int>\r\n\r\n$correlation_matrix\r\n                           id response_TIPI1 response_TIPI2\r\nid                1.000000000    -0.03087740    -0.03727441\r\nipsatized_TIPI1  -0.021481713     0.95997515    -0.11340834\r\nipsatized_TIPI2  -0.027501605    -0.12071784     0.95428074\r\nipsatized_TIPI3  -0.036290745     0.02535938    -0.16688353\r\nipsatized_TIPI4   0.022218869    -0.25970548     0.12817941\r\nipsatized_TIPI5   0.017044441     0.15867518    -0.13509164\r\nipsatized_TIPI6   0.033065029    -0.68318241    -0.07328539\r\nipsatized_TIPI7   0.021550310     0.19604318    -0.39102208\r\nipsatized_TIPI8   0.028246853    -0.09883568     0.05362126\r\nipsatized_TIPI9  -0.029634489     0.06676858    -0.27632275\r\nipsatized_TIPI10 -0.005017054    -0.22041641    -0.06129857\r\n                 response_TIPI3 response_TIPI4 response_TIPI5\r\nid                 -0.045915845    0.011284963   0.0008224971\r\nipsatized_TIPI1     0.031167709   -0.244068520   0.1736167712\r\nipsatized_TIPI2    -0.167224238    0.148187176  -0.1206510887\r\nipsatized_TIPI3     0.948872899   -0.298764735   0.0086683433\r\nipsatized_TIPI4    -0.307516250    0.962139678  -0.2550686241\r\nipsatized_TIPI5    -0.005073157   -0.256663167   0.9192189953\r\nipsatized_TIPI6    -0.024670231    0.073760081  -0.2270060851\r\nipsatized_TIPI7     0.007475973   -0.008942264   0.0736922080\r\nipsatized_TIPI8    -0.550478491    0.158821663  -0.0270662628\r\nipsatized_TIPI9     0.268938383   -0.690397982   0.0655434271\r\nipsatized_TIPI10   -0.108530999   -0.002177791  -0.3767678405\r\n                 response_TIPI6 response_TIPI7 response_TIPI8\r\nid                  0.021000522    0.007644219     0.01618021\r\nipsatized_TIPI1    -0.666541441    0.170445729    -0.08266381\r\nipsatized_TIPI2    -0.038939637   -0.403279907     0.06565301\r\nipsatized_TIPI3     0.015568018   -0.020080341    -0.54989652\r\nipsatized_TIPI4     0.091005873   -0.050084957     0.15131155\r\nipsatized_TIPI5    -0.203227013    0.024189448    -0.02356731\r\nipsatized_TIPI6     0.953180313   -0.215281446    -0.08954131\r\nipsatized_TIPI7    -0.162399055    0.949232042    -0.08558253\r\nipsatized_TIPI8    -0.067303304   -0.119072017     0.95695523\r\nipsatized_TIPI9    -0.009290563   -0.028893032    -0.33029253\r\nipsatized_TIPI10    0.040201343   -0.228842712    -0.10619799\r\n                 response_TIPI9 response_TIPI10\r\nid                  -0.03949432    -0.017594425\r\nipsatized_TIPI1      0.09172718    -0.187414036\r\nipsatized_TIPI2     -0.26483551    -0.031356832\r\nipsatized_TIPI3      0.29771049    -0.076414836\r\nipsatized_TIPI4     -0.68790076     0.007123348\r\nipsatized_TIPI5      0.08228079    -0.365950413\r\nipsatized_TIPI6     -0.02645471     0.029629981\r\nipsatized_TIPI7      0.01615832    -0.176200329\r\nipsatized_TIPI8     -0.32648284    -0.089488624\r\nipsatized_TIPI9      0.95761526    -0.057303325\r\nipsatized_TIPI10    -0.06741043     0.941250723\r\n\r\nipsatize(iris)\r\n\r\n\r\n$ipsatized\r\n# A tibble: 150 x 5\r\n      id ipsatized_Sepal.Len~ ipsatized_Sepal.Wid~ ipsatized_Petal.Le~\r\n   <int>                <dbl>                <dbl>               <dbl>\r\n 1     1                 2.55                0.95               -1.15 \r\n 2     2                 2.53                0.625              -0.975\r\n 3     3                 2.35                0.85               -1.05 \r\n 4     4                 2.25                0.75               -0.85 \r\n 5     5                 2.45                1.05               -1.15 \r\n 6     6                 2.55                1.05               -1.15 \r\n 7     7                 2.17                0.975              -1.02 \r\n 8     8                 2.48                0.875              -1.02 \r\n 9     9                 2.18                0.675              -0.825\r\n10    10                 2.5                 0.7                -0.9  \r\n# ... with 140 more rows, and 1 more variable:\r\n#   ipsatized_Petal.Width <dbl>\r\n\r\n$raw\r\n# A tibble: 150 x 5\r\n      id response_Sepal.Leng~ response_Sepal.Width response_Petal.Len~\r\n   <int>                <dbl>                <dbl>               <dbl>\r\n 1     1                  5.1                  3.5                 1.4\r\n 2     2                  4.9                  3                   1.4\r\n 3     3                  4.7                  3.2                 1.3\r\n 4     4                  4.6                  3.1                 1.5\r\n 5     5                  5                    3.6                 1.4\r\n 6     6                  5.4                  3.9                 1.7\r\n 7     7                  4.6                  3.4                 1.4\r\n 8     8                  5                    3.4                 1.5\r\n 9     9                  4.4                  2.9                 1.4\r\n10    10                  4.9                  3.1                 1.5\r\n# ... with 140 more rows, and 1 more variable:\r\n#   response_Petal.Width <dbl>\r\n\r\n$correlation_matrix\r\n                                id response_Sepal.Length\r\nid                      1.00000000             0.7166763\r\nipsatized_Sepal.Length -0.25714094             0.3325941\r\nipsatized_Sepal.Width  -0.86197818            -0.8057327\r\nipsatized_Petal.Length  0.87192559             0.7855245\r\nipsatized_Petal.Width   0.08708789            -0.4736449\r\n                       response_Sepal.Width response_Petal.Length\r\nid                               -0.4023010             0.8826365\r\nipsatized_Sepal.Length            0.2741067            -0.1309424\r\nipsatized_Sepal.Width             0.6253708            -0.9690120\r\nipsatized_Petal.Length           -0.5686501             0.9834439\r\nipsatized_Petal.Width            -0.4460778            -0.1048994\r\n                       response_Petal.Width\r\nid                                0.9000274\r\nipsatized_Sepal.Length           -0.2411263\r\nipsatized_Sepal.Width            -0.9271668\r\nipsatized_Petal.Length            0.9327515\r\nipsatized_Petal.Width             0.0736434\r\n\r\nSo now we have a list with the three dataframes. Our function-writing journey is officially complete. Finally, we can explore a couple of ways to use this function and its output.\r\nWhen using this function on projects for personality research, we may want to look at the correlations between raw and ipsatized data.\r\n\r\n\r\nipsdat <- ipsatize(data)\r\n\r\ntibble(\r\n  diag(ipsdat$correlation_matrix), colnames(ipsdat$ipsatized), colnames(ipsdat$raw)\r\n)\r\n\r\n\r\n\r\nWe can also plot raw and ipsatized data. For example, let’s look at the item 1.\r\n\r\n\r\nTIPI_item1 <- data.frame(ipsdat$raw$TIPI1, ipsdat$ipsatized$TIPI1_ips)\r\n\r\nTIPI_item1 %>% \r\n  ggplot()+\r\n   geom_density(aes(x=TIPI_item1[,1]), colour=\"red\", fill = \"red\", alpha = .5) + \r\n   geom_density(aes(x=TIPI_item1[,2]), colour=\"blue\", fill = \"blue\", alpha = .5) +\r\n  theme_minimal()\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-06-06T21:55:16-07:00",
    "input_file": {}
  }
]
